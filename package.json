{
  "name": "react-component-maker",
  "displayName": "React Component Maker",
  "description": "Quickly generate customizable React components using templates",
  "version": "0.0.8",
  "publisher": "ai36",
  "repository": "https://github.com/ai36/react-component-maker",
  "icon": "images/favicon.png",
  "engines": {
    "vscode": "^1.75.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onCommand:reactComponentMaker.createComponent",
    "onCommand:reactComponentMaker.openTemplateFolder"
  ],
  "main": "extension.js",
  "contributes": {
    "commands": [
      {
        "command": "reactComponentMaker.createComponent",
        "title": "Create React Component"
      },
      {
        "command": "reactComponentMaker.openTemplateFolder",
        "title": "Open Component Templates"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "when": "explorerResourceIsFolder",
          "command": "reactComponentMaker.createComponent",
          "group": "navigation@100"
        },
        {
          "when": "explorerResourceIsFolder",
          "command": "reactComponentMaker.openTemplateFolder",
          "group": "navigation@110"
        }
      ]
    },
    "configuration": {
      "title": "React Component Maker",
      "properties": {
        "reactComponentMaker.useTypeScript": {
          "type": "boolean",
          "default": false,
          "description": "If true, generates .tsx/.ts files instead of .jsx/.js",
          "order": 1
        },
        "reactComponentMaker.defaultTemplate": {
          "type": "string",
          "editPresentation": "multilineText",
          "default": "import styles from './${componentStyleFileName}';\n\nexport const ${componentName} = () => {\n  return (\n    <>\n      <div className={styles.${camelCase}}>Hello from ${componentName}</div>\n    </>\n  );\n}",
          "description": "Default template for the component.\nTemplate literals are supported, see README.md",
          "order": 10
        },
        "reactComponentMaker.folderNameStyle": {
          "type": "string",
          "enum": [
            "camelCase",
            "PascalCase",
            "kebab-case",
            "snake_case",
            "lowercase"
          ],
          "default": "kebab-case",
          "description": "Style for the component folder name",
          "order": 20
        },
        "reactComponentMaker.fileNameStyle": {
          "type": "string",
          "enum": [
            "camelCase",
            "PascalCase",
            "kebab-case",
            "snake_case",
            "lowercase"
          ],
          "default": "PascalCase",
          "description": "Style for the component file name",
          "order": 21
        },
        "reactComponentMaker.createStyleFile": {
          "type": "boolean",
          "default": true,
          "description": "Whether to generate a style file",
          "order": 30
        },
        "reactComponentMaker.styleFileNameStyle": {
          "type": "string",
          "enum": [
            "camelCase",
            "PascalCase",
            "kebab-case",
            "snake_case",
            "lowercase"
          ],
          "default": "camelCase",
          "description": "Style for the style file name",
          "order": 31
        },
        "reactComponentMaker.styleExtension": {
          "type": "string",
          "enum": [
            "css",
            "scss",
            "module.css",
            "module.scss"
          ],
          "default": "module.css",
          "description": "Extension for the style file. Use module.* for CSS modules",
          "order": 32
        },
        "reactComponentMaker.generateIndexFile": {
          "type": "boolean",
          "default": true,
          "description": "Generate index.js or index.ts file that exports the component",
          "order": 40
        },
        "reactComponentMaker.indexTemplate": {
          "type": "string",
          "editPresentation": "multilineText",
          "default": "export * from './${componentFolderName}/${componentBaseFileName}';\n",
          "description": "Template for the index file.\nTemplate literals are supported, see README.md",
          "order": 41
        },
        "reactComponentMaker.indexInComponentFolder": {
          "type": "boolean",
          "default": false,
          "description": "If true, creates index file inside the component folder. Otherwise, appends to index file in the parent folder. If index.js exists in the parent folder, will add the component export to the existing file",
          "order": 42
        },
        "reactComponentMaker.generateTypesFile": {
          "type": "boolean",
          "default": false,
          "description": "Generate a types.ts file for type declarations",
          "order": 50
        },
        "reactComponentMaker.typesTemplate": {
          "type": "string",
          "editPresentation": "multilineText",
          "default": "export interface ${componentName}Props {\n}\n",
          "description": "Template for the types.ts file.\nTemplate literals are supported, see README.md",
          "order": 51
        },
        "reactComponentMaker.generateTestFile": {
          "type": "boolean",
          "default": false,
          "description": "Generate a test file for the component",
          "order": 60
        },
        "reactComponentMaker.testTemplate": {
          "type": "string",
          "editPresentation": "multilineText",
          "default": "import { render } from '@testing-library/react';\nimport ${componentName} from './${componentFolderName}/${componentFileName}';\n\ndescribe('${componentName}', () => {\n  it('renders correctly', () => {\n    render(<${componentName} />);\n  });\n});",
          "description": "Template for the test file.\nTemplate literals are supported, see README.md",
          "order": 61
        }
      }
    }
  },
  "scripts": {},
  "devDependencies": {}
}
